{
  "timestamp": "2025-06-12T12:26:12.182103",
  "current_task_index": -1,
  "current_task_id": null,
  "project_directory": "C:\\Users\\Administrator\\Documents\\SSDI",
  "project_label": "SSDI",
  "all_tasks": [
    {
      "id": 0,
      "description": "Objective: Add necessary libraries for Google APIs, email composition, and encryption. Set up environment variables to securely store credentials.\n\nFile to be created: `C:\\Users\\Administrator\\Documents\\SSDI\\.env`\n\n**Instructions:**\n\n1.  Create a new file named `.env` in the root directory: `C:\\Users\\Administrator\\Documents\\SSDI\\.env`.\n2.  Populate it with the content below. You must obtain the `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET` from the Google Cloud Console as described in the reference documentation.\n3.  Replace `a_32_character_long_secret_key!!` with a securely generated 32-character string.\n\n```\n# Google OAuth Credentials\nGOOGLE_CLIENT_ID=\"YOUR_GOOGLE_CLIENT_ID\"\nGOOGLE_CLIENT_SECRET=\"YOUR_GOOGLE_CLIENT_SECRET\"\nGOOGLE_REDIRECT_URI=\"http://localhost:5000/api/auth/google/callback\"\n\n# Encryption Secret (must be 32 characters for aes-256-cbc)\nENCRYPTION_SECRET=\"a_32_character_long_secret_key!!\"\n```\n\nFile to be modified: `C:\\Users\\Administrator\\Documents\\SSDI\\package.json`\n\n**Instructions:**\n\n1.  Add the `googleapis` and `nodemailer` packages to the `dependencies` section and `@types/nodemailer` to `devDependencies`. These are essential for interacting with Google's APIs and for constructing and sending emails.\n\n```json\n{\n  \"name\": \"rest-express\",\n  \"version\": \"1.0.0\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"dev\": \"NODE_ENV=development tsx server/index.ts\",\n    \"build\": \"vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist\",\n    \"start\": \"NODE_ENV=production node dist/index.js\",\n    \"check\": \"tsc\",\n    \"db:push\": \"drizzle-kit push\"\n  },\n  \"dependencies\": {\n    \"@hookform/resolvers\": \"^3.10.0\",\n    \"@jridgewell/trace-mapping\": \"^0.3.25\",\n    \"@neondatabase/serverless\": \"^0.10.4\",\n    \"@radix-ui/react-accordion\": \"^1.2.4\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.7\",\n    \"@radix-ui/react-aspect-ratio\": \"^1.1.3\",\n    \"@radix-ui/react-avatar\": \"^1.1.4\",\n    \"@radix-ui/react-checkbox\": \"^1.1.5\",\n    \"@radix-ui/react-collapsible\": \"^1.1.4\",\n    \"@radix-ui/react-context-menu\": \"^2.2.7\",\n    \"@radix-ui/react-dialog\": \"^1.1.7\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.7\",\n    \"@radix-ui/react-hover-card\": \"^1.1.7\",\n    \"@radix-ui/react-label\": \"^2.1.3\",\n    \"@radix-ui/react-menubar\": \"^1.1.7\",\n    \"@radix-ui/react-navigation-menu\": \"^1.2.6\",\n    \"@radix-ui/react-popover\": \"^1.1.7\",\n    \"@radix-ui/react-progress\": \"^1.1.3\",\n    \"@radix-ui/react-radio-group\": \"^1.2.4\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.4\",\n    \"@radix-ui/react-select\": \"^2.1.7\",\n    \"@radix-ui/react-separator\": \"^1.1.3\",\n    \"@radix-ui/react-slider\": \"^1.2.4\",\n    \"@radix-ui/react-slot\": \"^1.2.0\",\n    \"@radix-ui/react-switch\": \"^1.1.4\",\n    \"@radix-ui/react-tabs\": \"^1.1.4\",\n    \"@radix-ui/react-toast\": \"^1.2.7\",\n    \"@radix-ui/react-toggle\": \"^1.1.3\",\n    \"@radix-ui/react-toggle-group\": \"^1.1.3\",\n    \"@radix-ui/react-tooltip\": \"^1.2.0\",\n    \"@tanstack/react-query\": \"^5.60.5\",\n    \"@types/multer\": \"^1.4.13\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"cmdk\": \"^1.1.1\",\n    \"connect-pg-simple\": \"^10.0.0\",\n    \"date-fns\": \"^3.6.0\",\n    \"drizzle-orm\": \"^0.39.1\",\n    \"drizzle-zod\": \"^0.7.0\",\n    \"embla-carousel-react\": \"^8.6.0\",\n    \"express\": \"^4.21.2\",\n    \"express-session\": \"^1.18.1\",\n    \"framer-motion\": \"^11.13.1\",\n    \"googleapis\": \"^140.0.1\",\n    \"input-otp\": \"^1.4.2\",\n    \"lucide-react\": \"^0.453.0\",\n    \"memorystore\": \"^1.6.7\",\n    \"multer\": \"^2.0.1\",\n    \"next-themes\": \"^0.4.6\",\n    \"nodemailer\": \"^6.9.14\",\n    \"passport\": \"^0.7.0\",\n    \"passport-local\": \"^1.0.0\",\n    \"react\": \"^18.3.1\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.55.0\",\n    \"react-icons\": \"^5.4.0\",\n    \"react-resizable-panels\": \"^2.1.7\",\n    \"recharts\": \"^2.15.2\",\n    \"tailwind-merge\": \"^2.6.0\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"tw-animate-css\": \"^1.2.5\",\n    \"vaul\": \"^1.1.2\",\n    \"wouter\": \"^3.3.5\",\n    \"ws\": \"^8.18.0\",\n    \"zod\": \"^3.24.2\",\n    \"zod-validation-error\": \"^3.4.0\"\n  },\n  \"devDependencies\": {\n    \"@replit/vite-plugin-cartographer\": \"^0.2.7\",\n    \"@replit/vite-plugin-runtime-error-modal\": \"^0.0.3\",\n    \"@tailwindcss/typography\": \"^0.5.15\",\n    \"@tailwindcss/vite\": \"^4.1.3\",\n    \"@types/connect-pg-simple\": \"^7.0.3\",\n    \"@types/express\": \"4.17.21\",\n    \"@types/express-session\": \"^1.18.0\",\n    \"@types/node\": \"20.16.11\",\n    \"@types/nodemailer\": \"^6.4.15\",\n    \"@types/passport\": \"^1.0.16\",\n    \"@types/passport-local\": \"^1.0.38\",\n    \"@types/react\": \"^18.3.11\",\n    \"@types/react-dom\": \"^18.3.1\",\n    \"@types/ws\": \"^8.5.13\",\n    \"@vitejs/plugin-react\": \"^4.3.2\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"drizzle-kit\": \"^0.30.4\",\n    \"esbuild\": \"^0.25.0\",\n    \"postcss\": \"^8.4.47\",\n    \"tailwindcss\": \"^3.4.17\",\n    \"tsx\": \"^4.19.1\",\n    \"typescript\": \"5.6.3\",\n    \"vite\": \"^5.4.14\"\n  },\n  \"optionalDependencies\": {\n    \"bufferutil\": \"^4.0.8\"\n  }\n}\n```\n2. Run `npm install` to install the new dependencies.",
      "status": "Completed",
      "filepath": "C:\\Users\\Administrator\\Documents\\SSDI\\claude-tasks\\tasks\\task_0.md",
      "error_details": null
    },
    {
      "id": 1,
      "description": "Objective: Add new tables `googleIntegrations` and `contacts` to the database schema to store OAuth tokens and user contacts.\n\nFile to be modified: `C:\\Users\\Administrator\\Documents\\SSDI\\shared\\schema.ts`\n\n**Instructions:**\n\n1.  Import necessary functions from `drizzle-orm/pg-core`.\n2.  Define the `googleIntegrations` table to store OAuth tokens. The `refreshToken` will be stored as encrypted text.\n3.  Define the `contacts` table to store user's contacts, linked by `userId`.\n4.  Define Zod schemas for insertion and selection for the new tables.\n\n```typescript\nimport {\n  pgTable,\n  serial,\n  integer,\n  varchar,\n  text,\n  boolean,\n  timestamp,\n  pgEnum,\n  jsonb,\n  real,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema, createSelectSchema } from 'drizzle-zod';\nimport { z } from 'zod';\n\n// USER\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 256 }).unique().notNull(),\n  password: text(\"password\").notNull(),\n  name: varchar(\"name\", { length: 256 }),\n  applicationId: varchar(\"applicationId\", { length: 256 }),\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n\tsections: many(sections),\n  retirementTrackings: many(retirementTracking),\n  googleIntegrations: many(googleIntegrations),\n  contacts: many(contacts),\n}));\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport const insertUserSchema = createInsertSchema(users);\nexport const selectUserSchema = createSelectSchema(users);\n\n// GOOGLE INTEGRATIONS\nexport const googleIntegrations = pgTable(\"google_integrations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  email: varchar(\"email\", { length: 256 }).notNull(),\n  accessToken: text(\"access_token\").notNull(),\n  refreshToken: text(\"refresh_token\").notNull(), // This will be encrypted\n  expiryDate: timestamp(\"expiry_date\", { withTimezone: true }).notNull(),\n  scopes: text(\"scopes\").notNull(), // Store scopes as a space-separated string\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n}, (table) => {\n  return {\n    userIdx: index(\"google_integrations_user_id_idx\").on(table.userId),\n  };\n});\n\nexport const googleIntegrationsRelations = relations(googleIntegrations, ({ one }) => ({\n  user: one(users, {\n    fields: [googleIntegrations.userId],\n    references: [users.id],\n  }),\n}));\n\nexport type GoogleIntegration = typeof googleIntegrations.$inferSelect;\nexport type InsertGoogleIntegration = typeof googleIntegrations.$inferInsert;\nexport const insertGoogleIntegrationSchema = createInsertSchema(googleIntegrations);\nexport const selectGoogleIntegrationSchema = createSelectSchema(googleIntegrations);\n\n// CONTACTS\nexport const contacts = pgTable(\"contacts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  name: varchar(\"name\", { length: 256 }).notNull(),\n  role: varchar(\"role\", { length: 256 }),\n  email: varchar(\"email\", { length: 256 }).notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n}, (table) => {\n  return {\n    userIdx: index(\"contacts_user_id_idx\").on(table.userId),\n  };\n});\n\nexport const contactsRelations = relations(contacts, ({ one }) => ({\n  user: one(users, {\n    fields: [contacts.userId],\n    references: [users.id],\n  }),\n}));\n\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertContact = typeof contacts.$inferInsert;\nexport const insertContactSchema = createInsertSchema(contacts);\nexport const selectContactSchema = createSelectSchema(contacts);\n\n\n// SECTIONS\nexport const sectionStatusEnum = pgEnum(\"section_status\", [\"complete\", \"in-progress\", \"needs-attention\"]);\n\nexport const sections = pgTable(\"sections\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  name: varchar(\"name\", { length: 256 }).notNull(),\n  description: text(\"description\"),\n  status: sectionStatusEnum(\"status\").notNull(),\n  order: integer(\"order\").notNull(),\n});\n\nexport const sectionsRelations = relations(sections, ({ one, many }) => ({\n  user: one(users, {\n    fields: [sections.userId],\n    references: [users.id],\n  }),\n  documents: many(documents),\n}));\n\nexport type Section = typeof sections.$inferSelect;\nexport type InsertSection = typeof sections.$inferInsert;\nexport const insertSectionSchema = createInsertSchema(sections);\nexport const selectSectionSchema = createSelectSchema(sections);\n\n\n// DOCUMENTS\nexport const documentStatusEnum = pgEnum(\"document_status\", [\"uploaded\", \"pending\", \"missing\"]);\nexport const documentCategoryEnum = pgEnum(\"document_category\", [\"personal\", \"medical\", \"legal\", \"employment\", \"government\"]);\n\nexport const documents = pgTable(\"documents\", {\n  id: serial(\"id\").primaryKey(),\n  sectionId: integer(\"section_id\").notNull().references(() => sections.id, { onDelete: 'cascade' }),\n  name: varchar(\"name\", { length: 256 }).notNull(),\n  description: text(\"description\"),\n  fileName: text(\"file_name\"),\n  fileSize: integer(\"file_size\"),\n  status: documentStatusEnum(\"status\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\", { withTimezone: true }),\n  contactInfo: text(\"contact_info\"),\n  notes: text(\"notes\"),\n  category: documentCategoryEnum(\"category\").notNull(),\n});\n\nexport const documentsRelations = relations(documents, ({ one }) => ({\n  section: one(sections, {\n    fields: [documents.sectionId],\n    references: [sections.id],\n  }),\n}));\n\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = typeof documents.$inferInsert;\nexport const insertDocumentSchema = createInsertSchema(documents);\nexport const selectDocumentSchema = createSelectSchema(documents);\n\n\n// RETIREMENT TRACKING\nexport const communicationTypeEnum = pgEnum(\"communication_type\", [\"email\", \"letter\", \"phone_call\", \"online_message\", \"deadline\", \"appointment\"]);\nexport const sourceEnum = pgEnum(\"source\", [\"social_security\", \"ssa_gov\", \"phone\", \"mail\", \"email\"]);\nexport const priorityEnum = pgEnum(\"priority\", [\"high\", \"medium\", \"low\"]);\n\nexport const retirementTracking = pgTable(\"retirement_tracking\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  type: communicationTypeEnum(\"type\").notNull(),\n  title: varchar(\"title\", { length: 256 }).notNull(),\n  description: text(\"description\").notNull(),\n  receivedAt: timestamp(\"received_at\", { withTimezone: true }).notNull(),\n  source: sourceEnum(\"source\").notNull(),\n  priority: priorityEnum(\"priority\").notNull(),\n  isActionRequired: boolean(\"is_action_required\").default(false).notNull(),\n  actionDeadline: timestamp(\"action_deadline\", { withTimezone: true }),\n  notes: text(\"notes\"),\n  attachmentFileName: text(\"attachment_file_name\"),\n  attachmentFileSize: integer(\"attachment_file_size\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\nexport const retirementTrackingRelations = relations(retirementTracking, ({ one }) => ({\n  user: one(users, {\n    fields: [retirementTracking.userId],\n    references: [users.id],\n  }),\n}));\n\nexport type RetirementTracking = typeof retirementTracking.$inferSelect;\nexport type InsertRetirementTracking = typeof retirementTracking.$inferInsert;\nexport const insertRetirementTrackingSchema = createInsertSchema(retirementTracking);\nexport const selectRetirementTrackingSchema = createSelectSchema(retirementTracking);\n```\n\n5.  After saving the schema file, run the following command in your terminal to apply the changes to your database:\n    ```bash\n    npm run db:push\n    ```",
      "status": "Completed",
      "filepath": "C:\\Users\\Administrator\\Documents\\SSDI\\claude-tasks\\tasks\\task_1.md",
      "error_details": null
    },
    {
      "id": 2,
      "description": "Objective: Centralize all logic for Google API interactions and data encryption into dedicated service files. This improves code organization and reusability.\n\nFile to be created: `C:\\Users\\Administrator\\Documents\\SSDI\\server\\encryption.ts`\n\n**Instructions:**\n\n1.  Create this new file to handle encryption and decryption of the refresh tokens.\n\n```typescript\nimport crypto from 'crypto';\n\nconst ALGORITHM = 'aes-256-cbc';\nconst IV_LENGTH = 16;\nconst ENCRYPTION_KEY = Buffer.from(process.env.ENCRYPTION_SECRET!, 'utf-8');\n\nif (!process.env.ENCRYPTION_SECRET || process.env.ENCRYPTION_SECRET.length !== 32) {\n  throw new Error('ENCRYPTION_SECRET must be set and be 32 characters long.');\n}\n\nexport function encrypt(text: string): string {\n  const iv = crypto.randomBytes(IV_LENGTH);\n  const cipher = crypto.createCipheriv(ALGORITHM, ENCRYPTION_KEY, iv);\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  return iv.toString('hex') + ':' + encrypted;\n}\n\nexport function decrypt(text: string): string {\n  const textParts = text.split(':');\n  const iv = Buffer.from(textParts.shift()!, 'hex');\n  const encryptedText = Buffer.from(textParts.join(':'), 'hex');\n  const decipher = crypto.createDecipheriv(ALGORITHM, ENCRYPTION_KEY, iv);\n  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n```\n\nFile to be created: `C:\\Users\\Administrator\\Documents\\SSDI\\server\\google.ts`\n\n**Instructions:**\n\n1.  Create this new service file. It will contain all methods for interacting with Google APIs.\n\n```typescript\nimport { google } from 'googleapis';\nimport { storage } from './storage';\nimport { decrypt } from './encryption';\nimport nodemailer from 'nodemailer';\nimport { Document } from '@shared/schema';\nimport fs from 'fs';\nimport path from 'path';\n\nconst oauth2Client = new google.auth.OAuth2(\n  process.env.GOOGLE_CLIENT_ID,\n  process.env.GOOGLE_CLIENT_SECRET,\n  process.env.GOOGLE_REDIRECT_URI\n);\n\nexport const googleAuthUrl = oauth2Client.generateAuthUrl({\n  access_type: 'offline',\n  scope: [\n    'https://www.googleapis.com/auth/calendar.events',\n    'https://www.googleapis.com/auth/gmail.send'\n  ],\n  prompt: 'consent',\n});\n\nexport async function getTokensFromCode(code: string) {\n  const { tokens } = await oauth2Client.getToken(code);\n  return tokens;\n}\n\nasync function getAuthenticatedClient(userId: number) {\n  const integration = await storage.getGoogleIntegration(userId);\n  if (!integration) {\n    throw new Error('Google integration not found for this user.');\n  }\n\n  const client = new google.auth.OAuth2(\n    process.env.GOOGLE_CLIENT_ID,\n    process.env.GOOGLE_CLIENT_SECRET,\n    process.env.GOOGLE_REDIRECT_URI\n  );\n\n  const tokens = {\n    access_token: integration.accessToken,\n    refresh_token: decrypt(integration.refreshToken),\n    expiry_date: new Date(integration.expiryDate).getTime(),\n    token_type: 'Bearer',\n  };\n\n  client.setCredentials(tokens);\n\n  // Auto-refresh token if needed\n  client.on('tokens', async (newTokens) => {\n    let updatedTokens = { ...tokens, ...newTokens };\n    \n    // Google doesn't always send a new refresh token\n    if (!newTokens.refresh_token) {\n        newTokens.refresh_token = tokens.refresh_token;\n    }\n    \n    await storage.updateGoogleIntegration(userId, {\n        accessToken: newTokens.access_token!,\n        refreshToken: newTokens.refresh_token!, // This will be re-encrypted by storage layer\n        expiryDate: new Date(newTokens.expiry_date!),\n    });\n\n    client.setCredentials(updatedTokens);\n  });\n\n  // Check if token is expired and refresh if necessary\n  if (new Date() > integration.expiryDate) {\n    const { credentials } = await client.refreshAccessToken();\n    client.setCredentials(credentials);\n  }\n\n  return client;\n}\n\nexport async function createCalendarEvent(userId: number, event: { summary: string; description: string; start: { dateTime: string; timeZone: string; }; end: { dateTime: string; timeZone: 'America/Los_Angeles'; }; }) {\n    try {\n        const auth = await getAuthenticatedClient(userId);\n        const calendar = google.calendar({ version: 'v3', auth });\n        \n        await calendar.events.insert({\n            calendarId: 'primary',\n            requestBody: event,\n        });\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to create calendar event:', error);\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nexport async function sendEmail(userId: number, to: string, subject: string, body: string, attachments: Document[]) {\n    try {\n        const auth = await getAuthenticatedClient(userId);\n        const integration = await storage.getGoogleIntegration(userId);\n        if (!integration) throw new Error(\"User not integrated with Google\");\n\n        const transporter = nodemailer.createTransport({\n            service: 'gmail',\n            auth: {\n                type: 'OAuth2',\n                user: integration.email,\n                clientId: process.env.GOOGLE_CLIENT_ID,\n                clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n                refreshToken: decrypt(integration.refreshToken),\n                accessToken: integration.accessToken,\n            },\n        });\n\n        const mailOptions = {\n            from: integration.email,\n            to: to,\n            subject: subject,\n            html: body,\n            attachments: attachments.map(doc => {\n              const filePath = path.join(process.cwd(), 'uploads', doc.fileName!);\n              return {\n                filename: doc.name + path.extname(doc.fileName!),\n                content: fs.createReadStream(filePath),\n              }\n            })\n        };\n\n        await transporter.sendMail(mailOptions);\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to send email:', error);\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nexport async function getUserInfo(tokens: { access_token: string }) {\n    const oauth2 = google.oauth2({ version: 'v2', auth: oauth2Client });\n    oauth2Client.setCredentials(tokens);\n    const { data } = await oauth2.userinfo.get();\n    return data;\n}\n```",
      "status": "Completed",
      "filepath": "C:\\Users\\Administrator\\Documents\\SSDI\\claude-tasks\\tasks\\task_2.md",
      "error_details": null
    },
    {
      "id": 3,
      "description": "Objective: Implement methods in the `DatabaseStorage` class to perform CRUD operations on the new `googleIntegrations` and `contacts` tables.\n\nFile to be modified: `C:\\Users\\Administrator\\Documents\\SSDI\\server\\storage.ts`\n\n**Instructions:**\n\n1.  Import the new tables and types from `shared/schema.ts`.\n2.  Import the encryption/decryption functions.\n3.  Add the new interface methods to `IStorage`.\n4.  Implement the new methods in the `DatabaseStorage` class. Note the automatic encryption of the refresh token.\n\n```typescript\nimport { users, sections, documents, retirementTracking, googleIntegrations, contacts, type User, type InsertUser, type Section, type InsertSection, type Document, type InsertDocument, type RetirementTracking, type InsertRetirementTracking, type GoogleIntegration, type InsertGoogleIntegration, type Contact, type InsertContact } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\nimport { encrypt } from \"./encryption\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Section operations\n  getSectionsByUserId(userId: number): Promise<Section[]>;\n  getSection(id: number): Promise<Section | undefined>;\n  createSection(section: InsertSection): Promise<Section>;\n  updateSectionStatus(id: number, status: string): Promise<Section | undefined>;\n  \n  // Document operations\n  getDocumentsBySectionId(sectionId: number): Promise<Document[]>;\n  getDocument(id: number): Promise<Document | undefined>;\n  createDocument(document: InsertDocument): Promise<Document>;\n  updateDocument(id: number, document: Partial<InsertDocument>): Promise<Document | undefined>;\n  deleteDocument(id: number): Promise<boolean>;\n\n  // Retirement tracking operations\n  getRetirementTrackingByUserId(userId: number): Promise<RetirementTracking[]>;\n  getRetirementTracking(id: number): Promise<RetirementTracking | undefined>;\n  createRetirementTracking(tracking: InsertRetirementTracking): Promise<RetirementTracking>;\n  updateRetirementTracking(id: number, tracking: Partial<InsertRetirementTracking>): Promise<RetirementTracking | undefined>;\n  deleteRetirementTracking(id: number): Promise<boolean>;\n\n  // Google Integration operations\n  getGoogleIntegration(userId: number): Promise<GoogleIntegration | undefined>;\n  createOrUpdateGoogleIntegration(integration: InsertGoogleIntegration): Promise<GoogleIntegration>;\n  updateGoogleIntegration(userId: number, integration: Partial<InsertGoogleIntegration>): Promise<GoogleIntegration | undefined>;\n  deleteGoogleIntegration(userId: number): Promise<boolean>;\n\n  // Contact operations\n  getContactsByUserId(userId: number): Promise<Contact[]>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  updateContact(id: number, contact: Partial<InsertContact>): Promise<Contact | undefined>;\n  deleteContact(id: number): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize with sample data if needed\n    this.initializeSampleData();\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getSectionsByUserId(userId: number): Promise<Section[]> {\n    return await db.select().from(sections).where(eq(sections.userId, userId)).orderBy(sections.order);\n  }\n\n  async getSection(id: number): Promise<Section | undefined> {\n    const [section] = await db.select().from(sections).where(eq(sections.id, id));\n    return section || undefined;\n  }\n\n  async createSection(section: InsertSection): Promise<Section> {\n    const [newSection] = await db\n      .insert(sections)\n      .values(section)\n      .returning();\n    return newSection;\n  }\n\n  async updateSectionStatus(id: number, status: string): Promise<Section | undefined> {\n    const [updatedSection] = await db\n      .update(sections)\n      .set({ status })\n      .where(eq(sections.id, id))\n      .returning();\n    return updatedSection || undefined;\n  }\n\n  async getDocumentsBySectionId(sectionId: number): Promise<Document[]> {\n    return await db.select().from(documents).where(eq(documents.sectionId, sectionId));\n  }\n\n  async getDocument(id: number): Promise<Document | undefined> {\n    const [document] = await db.select().from(documents).where(eq(documents.id, id));\n    return document || undefined;\n  }\n\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const documentToInsert = {\n      ...document,\n      uploadedAt: document.status === 'uploaded' ? new Date() : null\n    };\n    \n    const [newDocument] = await db\n      .insert(documents)\n      .values(documentToInsert)\n      .returning();\n    return newDocument;\n  }\n\n  async updateDocument(id: number, documentUpdate: Partial<InsertDocument>): Promise<Document | undefined> {\n    const updateData = {\n      ...documentUpdate,\n      uploadedAt: documentUpdate.status === 'uploaded' ? new Date() : undefined\n    };\n    \n    const [updatedDocument] = await db\n      .update(documents)\n      .set(updateData)\n      .where(eq(documents.id, id))\n      .returning();\n    return updatedDocument || undefined;\n  }\n\n  async deleteDocument(id: number): Promise<boolean> {\n    const result = await db.delete(documents).where(eq(documents.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getRetirementTrackingByUserId(userId: number): Promise<RetirementTracking[]> {\n    return await db.select().from(retirementTracking).where(eq(retirementTracking.userId, userId)).orderBy(desc(retirementTracking.receivedAt));\n  }\n\n  async getRetirementTracking(id: number): Promise<RetirementTracking | undefined> {\n    const [tracking] = await db.select().from(retirementTracking).where(eq(retirementTracking.id, id));\n    return tracking || undefined;\n  }\n\n  async createRetirementTracking(tracking: InsertRetirementTracking): Promise<RetirementTracking> {\n    const [newTracking] = await db\n      .insert(retirementTracking)\n      .values(tracking)\n      .returning();\n    return newTracking;\n  }\n\n  async updateRetirementTracking(id: number, trackingUpdate: Partial<InsertRetirementTracking>): Promise<RetirementTracking | undefined> {\n    const [updatedTracking] = await db\n      .update(retirementTracking)\n      .set(trackingUpdate)\n      .where(eq(retirementTracking.id, id))\n      .returning();\n    return updatedTracking || undefined;\n  }\n\n  async deleteRetirementTracking(id: number): Promise<boolean> {\n    const result = await db.delete(retirementTracking).where(eq(retirementTracking.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Google Integration Methods\n  async getGoogleIntegration(userId: number): Promise<GoogleIntegration | undefined> {\n    const [integration] = await db.select().from(googleIntegrations).where(eq(googleIntegrations.userId, userId));\n    return integration || undefined;\n  }\n\n  async createOrUpdateGoogleIntegration(integration: InsertGoogleIntegration): Promise<GoogleIntegration> {\n    const encryptedIntegration = {\n      ...integration,\n      refreshToken: encrypt(integration.refreshToken),\n    };\n\n    const [newIntegration] = await db.insert(googleIntegrations)\n      .values(encryptedIntegration)\n      .onConflictDoUpdate({ \n        target: googleIntegrations.userId, \n        set: {\n          email: encryptedIntegration.email,\n          accessToken: encryptedIntegration.accessToken,\n          refreshToken: encryptedIntegration.refreshToken,\n          expiryDate: encryptedIntegration.expiryDate,\n          scopes: encryptedIntegration.scopes,\n        }\n      })\n      .returning();\n    return newIntegration;\n  }\n\n  async updateGoogleIntegration(userId: number, integrationUpdate: Partial<InsertGoogleIntegration>): Promise<GoogleIntegration | undefined> {\n    let updateData = { ...integrationUpdate };\n    if (integrationUpdate.refreshToken) {\n      updateData.refreshToken = encrypt(integrationUpdate.refreshToken);\n    }\n\n    const [updatedIntegration] = await db\n      .update(googleIntegrations)\n      .set(updateData)\n      .where(eq(googleIntegrations.userId, userId))\n      .returning();\n    return updatedIntegration || undefined;\n  }\n\n  async deleteGoogleIntegration(userId: number): Promise<boolean> {\n    const result = await db.delete(googleIntegrations).where(eq(googleIntegrations.userId, userId));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Contact Methods\n  async getContactsByUserId(userId: number): Promise<Contact[]> {\n    return await db.select().from(contacts).where(eq(contacts.userId, userId)).orderBy(desc(contacts.createdAt));\n  }\n\n  async createContact(contact: InsertContact): Promise<Contact> {\n    const [newContact] = await db.insert(contacts).values(contact).returning();\n    return newContact;\n  }\n\n  async updateContact(id: number, contactUpdate: Partial<InsertContact>): Promise<Contact | undefined> {\n    const [updatedContact] = await db\n      .update(contacts)\n      .set(contactUpdate)\n      .where(eq(contacts.id, id))\n      .returning();\n    return updatedContact || undefined;\n  }\n\n  async deleteContact(id: number): Promise<boolean> {\n    const result = await db.delete(contacts).where(eq(contacts.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  private async initializeSampleData() {\n    // Check if user already exists\n    const existingUser = await this.getUser(1);\n    if(existingUser) return;\n\n    // Create sample user\n    const user = await this.createUser({\n      username: \"john.smith\",\n      password: \"password\",\n      name: \"John Smith\",\n      applicationId: \"SS-2024-001234\"\n    });\n\n    // Create initial sections\n    const sectionsData = [\n      {\n        userId: user.id,\n        name: \"Initial Application Documents\",\n        description: \"Basic information to start your application\",\n        status: \"complete\",\n        order: 1\n      },\n      {\n        userId: user.id,\n        name: \"Medical Evidence\",\n        description: \"Documents that prove your disability\",\n        status: \"in-progress\",\n        order: 2\n      },\n      {\n        userId: user.id,\n        name: \"Work History Documentation\",\n        description: \"Proof of your past employment and job duties\",\n        status: \"complete\",\n        order: 3\n      },\n      {\n        userId: user.id,\n        name: \"Appeals Process Documents\",\n        description: \"Documents needed if your application is denied\",\n        status: \"needs-attention\",\n        order: 4\n      }\n    ];\n\n    for (const sectionData of sectionsData) {\n      const section = await this.createSection(sectionData);\n      \n      // Create sample documents for each section\n      if (section.name === \"Initial Application Documents\") {\n        await this.createDocument({\n          sectionId: section.id,\n          name: \"Birth Certificate\",\n          description: \"Proves your age and citizenship status\",\n          fileName: \"birth_certificate.pdf\",\n          fileSize: 2048000,\n          status: \"uploaded\",\n          notes: \"Official copy from vital records office\",\n          category: \"government\"\n        });\n        \n        await this.createDocument({\n          sectionId: section.id,\n          name: \"W-2 Forms (Last 2 Years)\",\n          description: \"Shows your recent work history and earnings\",\n          fileName: \"w2_forms_2022_2023.pdf\",\n          fileSize: 1536000,\n          status: \"uploaded\",\n          notes: \"Forms from ABC Manufacturing\",\n          category: \"employment\"\n        });\n        \n        await this.createDocument({\n          sectionId: section.id,\n          name: \"Tax Returns (Last 2 Years)\",\n          description: \"Additional proof of income and work history\",\n          fileName: \"tax_returns_2022_2023.pdf\",\n          fileSize: 3072000,\n          status: \"uploaded\",\n          notes: \"Filed jointly with spouse\",\n          category: \"personal\"\n        });\n      } else if (section.name === \"Medical Evidence\") {\n        await this.createDocument({\n          sectionId: section.id,\n          name: \"Primary Care Physician Records\",\n          description: \"Records from Dr. Johnson showing ongoing treatment\",\n          fileName: \"dr_johnson_records.pdf\",\n          fileSize: 4096000,\n          status: \"uploaded\",\n          contactInfo: \"Dr. Johnson's office - (555) 123-4567\",\n          notes: \"Records from 2022-2024\",\n          category: \"medical\"\n        });\n        \n        await this.createDocument({\n          sectionId: section.id,\n          name: \"Specialist Reports\",\n          description: \"Reports from specialists who treated your condition\",\n          status: \"missing\",\n          contactInfo: \"Dr. Martinez's office - (555) 123-4567\",\n          notes: \"Need orthopedic specialist reports\",\n          category: \"medical\"\n        });\n      } else if (section.name === \"Work History Documentation\") {\n        await this.createDocument({\n          sectionId: section.id,\n          name: \"Employment Records (ABC Manufacturing)\",\n          description: \"Job description and employment dates: 2018-2023\",\n          fileName: \"abc_employment_records.pdf\",\n          fileSize: 1024000,\n          status: \"uploaded\",\n          notes: \"HR department provided complete records\",\n          category: \"employment\"\n        });\n        \n        await this.createDocument({\n          sectionId: section.id,\n          name: \"Job Description Letters\",\n          description: \"Detailed description of daily tasks and physical requirements\",\n          fileName: \"job_descriptions.pdf\",\n          fileSize: 512000,\n          status: \"uploaded\",\n          notes: \"Includes physical demands analysis\",\n          category: \"employment\"\n        });\n      } else if (section.name === \"Appeals Process Documents\") {\n        await this.createDocument({\n          sectionId: section.id,\n          name: \"Denial Letter\",\n          description: \"Official denial letter explaining why your application was rejected\",\n          status: \"missing\",\n          notes: \"Required to start appeal process - deadline May 15, 2024\",\n          category: \"legal\"\n        });\n      }\n    }\n\n    // Create sample retirement tracking entries\n    await this.createRetirementTracking({\n      userId: user.id,\n      type: \"email\",\n      title: \"Early Retirement Application Received\",\n      description: \"Confirmation that your early retirement application has been received and is being processed\",\n      receivedAt: new Date(\"2024-01-15T10:30:00Z\"),\n      source: \"ssa_gov\",\n      priority: \"medium\",\n      isActionRequired: false,\n      notes: \"Application reference: ER-2024-001234\"\n    });\n\n    await this.createRetirementTracking({\n      userId: user.id,\n      type: \"letter\",\n      title: \"Request for Additional Documentation\",\n      description: \"Social Security Administration requesting additional employment verification documents\",\n      receivedAt: new Date(\"2024-02-01T14:00:00Z\"),\n      source: \"mail\",\n      priority: \"high\",\n      isActionRequired: true,\n      actionDeadline: new Date(\"2024-03-01T23:59:59Z\"),\n      notes: \"Need to provide W-2 forms from 2019-2023 and employment verification letter\"\n    });\n\n    await this.createRetirementTracking({\n      userId: user.id,\n      type: \"phone_call\",\n      title: \"Status Update Call\",\n      description: \"Called SSA to check on application status - told processing is taking 3-4 months\",\n      receivedAt: new Date(\"2024-02-15T11:15:00Z\"),\n      source: \"phone\",\n      priority: \"low\",\n      isActionRequired: false,\n      notes: \"Spoke with representative Sarah Johnson. Case number: ER-2024-001234. Expected decision by April 2024.\"\n    });\n\n    await this.createRetirementTracking({\n      userId: user.id,\n      type: \"deadline\",\n      title: \"Medical Exam Appointment\",\n      description: \"Scheduled medical examination required for early retirement application\",\n      receivedAt: new Date(\"2024-02-20T09:00:00Z\"),\n      source: \"social_security\",\n      priority: \"high\",\n      isActionRequired: true,\n      actionDeadline: new Date(\"2024-03-15T14:00:00Z\"),\n      notes: \"Appointment with Dr. Wilson at Downtown Medical Center. Bring ID and insurance cards.\"\n    });\n  }\n}\n\nexport const storage = new DatabaseStorage();\n```",
      "status": "Completed",
      "filepath": "C:\\Users\\Administrator\\Documents\\SSDI\\claude-tasks\\tasks\\task_3.md",
      "error_details": null
    },
    {
      "id": 4,
      "description": "Objective: Create all new API endpoints required for the integration and modify existing ones as needed.\n\nFile to be modified: `C:\\Users\\Administrator\\Documents\\SSDI\\server\\routes.ts`\n\n**Instructions:**\n\n1.  Import the new services and schemas.\n2.  Add the new routes for Google OAuth, contacts management, and sending emails.\n3.  Modify the `/api/retirement-tracking` POST route to automatically create a calendar event.\n4.  Add a new route to create a calendar event for a section deadline.\n\n```typescript\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { googleAuthUrl, getTokensFromCode, getUserInfo, createCalendarEvent, sendEmail } from \"./google\";\nimport { insertDocumentSchema, insertRetirementTrackingSchema, insertContactSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedMimeTypes = ['application/pdf', 'image/jpeg', 'image/png', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    if (allowedMimeTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only PDF, JPG, PNG, and Word files are allowed.'));\n    }\n  }\n});\n\nconst USER_ID = 1; // For demo purposes, all operations are for user ID 1\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // --- GOOGLE INTEGRATION ROUTES ---\n\n  // Redirect to Google's OAuth consent screen\n  app.get(\"/api/auth/google\", (req, res) => {\n    res.redirect(googleAuthUrl);\n  });\n\n  // Handle the callback from Google\n  app.get(\"/api/auth/google/callback\", async (req, res) => {\n    const code = req.query.code as string;\n    if (!code) {\n      return res.status(400).send(\"Authorization code missing.\");\n    }\n\n    try {\n      const tokens = await getTokensFromCode(code);\n      const userInfo = await getUserInfo(tokens);\n      \n      if (!tokens.access_token || !tokens.refresh_token || !tokens.expiry_date || !tokens.scope || !userInfo.email) {\n          throw new Error(\"Failed to retrieve complete token information.\");\n      }\n      \n      await storage.createOrUpdateGoogleIntegration({\n        userId: USER_ID,\n        email: userInfo.email,\n        accessToken: tokens.access_token,\n        refreshToken: tokens.refresh_token,\n        expiryDate: new Date(tokens.expiry_date),\n        scopes: tokens.scope,\n      });\n\n      res.redirect(\"/integrations?status=success\");\n    } catch (error) {\n      console.error(\"Google auth callback error:\", error);\n      res.redirect(\"/integrations?status=error\");\n    }\n  });\n  \n  // Get Google integration status\n  app.get(\"/api/integrations/google\", async (req, res) => {\n    try {\n      const integration = await storage.getGoogleIntegration(USER_ID);\n      if (integration) {\n        res.json({ isConnected: true, email: integration.email });\n      } else {\n        res.json({ isConnected: false });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get integration status\" });\n    }\n  });\n\n  // Disconnect Google account\n  app.delete(\"/api/integrations/google\", async (req, res) => {\n    try {\n      await storage.deleteGoogleIntegration(USER_ID);\n      res.json({ message: \"Google account disconnected successfully.\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to disconnect Google account.\" });\n    }\n  });\n\n\n  // --- USER & APPLICATION ROUTES ---\n\n  app.get(\"/api/user\", async (req, res) => {\n    try {\n      const user = await storage.getUser(USER_ID);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  app.get(\"/api/sections\", async (req, res) => {\n    try {\n      const sections = await storage.getSectionsByUserId(USER_ID);\n      res.json(sections);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get sections\" });\n    }\n  });\n\n  app.get(\"/api/sections/:sectionId/documents\", async (req, res) => {\n    try {\n      const sectionId = parseInt(req.params.sectionId);\n      const documents = await storage.getDocumentsBySectionId(sectionId);\n      res.json(documents);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get documents\" });\n    }\n  });\n\n  app.post(\"/api/sections/:sectionId/documents\", upload.single('file'), async (req, res) => {\n    try {\n      const sectionId = parseInt(req.params.sectionId);\n      const { name, description, notes, category } = req.body;\n      \n      if (!name || !description || !category) {\n        return res.status(400).json({ message: \"Name, description, and category are required\" });\n      }\n\n      const documentData = {\n        sectionId,\n        name,\n        description,\n        fileName: req.file?.filename || null,\n        fileSize: req.file?.size || null,\n        status: req.file ? 'uploaded' : 'pending',\n        notes: notes || null,\n        contactInfo: null,\n        category\n      };\n\n      const document = await storage.createDocument(documentData);\n      res.json(document);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to upload document\" });\n    }\n  });\n\n  app.delete(\"/api/documents/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteDocument(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Document not found\" });\n      }\n      \n      res.json({ message: \"Document deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete document\" });\n    }\n  });\n\n  // --- RETIREMENT TRACKING ROUTES ---\n\n  app.get(\"/api/retirement-tracking\", async (req, res) => {\n    try {\n      const trackings = await storage.getRetirementTrackingByUserId(USER_ID);\n      res.json(trackings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get retirement tracking\" });\n    }\n  });\n\n  app.post(\"/api/retirement-tracking\", upload.single('attachment'), async (req, res) => {\n    try {\n      const { type, title, description, receivedAt, source, priority, isActionRequired, actionDeadline, notes } = req.body;\n      \n      if (!type || !title || !description || !receivedAt || !source || !priority) {\n        return res.status(400).json({ message: \"Required fields missing\" });\n      }\n\n      const trackingData = {\n        userId: USER_ID,\n        type,\n        title,\n        description,\n        receivedAt: new Date(receivedAt),\n        source,\n        priority,\n        isActionRequired: isActionRequired === 'true',\n        actionDeadline: actionDeadline ? new Date(actionDeadline) : null,\n        notes: notes || null,\n        attachmentFileName: req.file?.filename || null,\n        attachmentFileSize: req.file?.size || null,\n      };\n\n      const tracking = await storage.createRetirementTracking(trackingData);\n\n      let calendarEventCreated = false;\n      if (tracking.isActionRequired && tracking.actionDeadline) {\n        const integration = await storage.getGoogleIntegration(USER_ID);\n        if (integration) {\n          const event = {\n            summary: tracking.title,\n            description: `${tracking.description}\\n\\nNotes: ${tracking.notes || 'N/A'}`,\n            start: {\n              dateTime: tracking.actionDeadline.toISOString(),\n              timeZone: 'America/Los_Angeles' // Should ideally be user's timezone\n            },\n            end: {\n              dateTime: new Date(tracking.actionDeadline.getTime() + 60 * 60 * 1000).toISOString(), // 1 hour duration\n              timeZone: 'America/Los_Angeles'\n            }\n          };\n          const result = await createCalendarEvent(USER_ID, event);\n          calendarEventCreated = result.success;\n        }\n      }\n      \n      res.json({ ...tracking, calendarEventCreated });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create retirement tracking entry\" });\n    }\n  });\n\n  app.delete(\"/api/retirement-tracking/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteRetirementTracking(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Retirement tracking entry not found\" });\n      }\n      \n      res.json({ message: \"Retirement tracking entry deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete retirement tracking entry\" });\n    }\n  });\n  \n  // --- CONTACTS ROUTES ---\n\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n        const contacts = await storage.getContactsByUserId(USER_ID);\n        res.json(contacts);\n    } catch (error) {\n        res.status(500).json({ message: \"Failed to get contacts.\" });\n    }\n  });\n\n  app.post(\"/api/contacts\", async (req, res) => {\n      try {\n          const contactData = insertContactSchema.parse({ ...req.body, userId: USER_ID });\n          const newContact = await storage.createContact(contactData);\n          res.status(201).json(newContact);\n      } catch (error) {\n          res.status(400).json({ message: \"Invalid contact data.\", error });\n      }\n  });\n\n  app.patch(\"/api/contacts/:id\", async (req, res) => {\n      try {\n          const id = parseInt(req.params.id);\n          const contactData = insertContactSchema.partial().parse(req.body);\n          const updatedContact = await storage.updateContact(id, contactData);\n          if (!updatedContact) {\n              return res.status(404).json({ message: \"Contact not found.\" });\n          }\n          res.json(updatedContact);\n      } catch (error) {\n          res.status(400).json({ message: \"Invalid contact data.\", error });\n      }\n  });\n\n  app.delete(\"/api/contacts/:id\", async (req, res) => {\n      try {\n          const id = parseInt(req.params.id);\n          const success = await storage.deleteContact(id);\n          if (!success) {\n              return res.status(404).json({ message: \"Contact not found.\" });\n          }\n          res.status(204).send();\n      } catch (error) {\n          res.status(500).json({ message: \"Failed to delete contact.\" });\n      }\n  });\n\n  // --- EMAIL ROUTE ---\n  \n  app.post(\"/api/email/send\", async (req, res) => {\n    try {\n      const { to, subject, body, attachmentIds } = req.body; // attachmentIds is an array of document IDs\n      if (!to || !subject || !body) {\n        return res.status(400).json({ message: \"To, subject, and body are required.\" });\n      }\n\n      const attachments = [];\n      if (attachmentIds && Array.isArray(attachmentIds)) {\n        for (const id of attachmentIds) {\n          const doc = await storage.getDocument(id);\n          if (doc && doc.fileName) {\n            attachments.push(doc);\n          }\n        }\n      }\n\n      const result = await sendEmail(USER_ID, to, subject, body, attachments);\n      if (result.success) {\n        res.json({ message: \"Email sent successfully.\" });\n      } else {\n        throw new Error(result.error);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send email.\", error: (error as Error).message });\n    }\n  });\n\n  // --- OTHER ROUTES ---\n\n  app.get(\"/api/files/:filename\", (req, res) => {\n    const filename = req.params.filename;\n    const filepath = path.join(uploadDir, filename);\n    \n    if (fs.existsSync(filepath)) {\n      res.sendFile(filepath);\n    } else {\n      res.status(404).json({ message: \"File not found\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n```",
      "status": "Completed",
      "filepath": "C:\\Users\\Administrator\\Documents\\SSDI\\claude-tasks\\tasks\\task_4.md",
      "error_details": null
    },
    {
      "id": 5,
      "description": "Objective: Create new pages for 'Integrations' and 'Contacts' and add them to the application's navigation.\n\nFile to be created: `C:\\Users\\Administrator\\Documents\\SSDI\\client\\src\\pages\\integrations.tsx`\n\n**Instructions:**\n\n1.  Create this new page component. It will handle connecting and disconnecting the user's Google account.\n\n```typescript\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { CheckCircle, AlertTriangle, LogOut, ExternalLink } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface IntegrationStatus {\n  isConnected: boolean;\n  email?: string;\n}\n\nexport default function IntegrationsPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location, setLocation] = useLocation();\n\n  // Check for status from OAuth callback\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    if (params.get('status') === 'success') {\n      toast({\n        title: \"Connection Successful\",\n        description: \"Your Google account has been connected.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations/google\"] });\n      setLocation('/integrations'); // Clean URL\n    } else if (params.get('status') === 'error') {\n      toast({\n        title: \"Connection Failed\",\n        description: \"Could not connect your Google account. Please try again.\",\n        variant: \"destructive\",\n      });\n      setLocation('/integrations'); // Clean URL\n    }\n  }, [toast, queryClient, setLocation]);\n\n  const { data: status, isLoading } = useQuery<IntegrationStatus>({\n    queryKey: [\"/api/integrations/google\"],\n  });\n\n  const disconnectMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/integrations/google\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/integrations/google\"] });\n      toast({\n        title: \"Account Disconnected\",\n        description: \"Your Google account has been successfully disconnected.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Disconnect Failed\",\n        description: \"Could not disconnect your account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\\\"min-h-screen bg-ssdi-light flex items-center justify-center\\\">\n        <div className=\\\"animate-spin rounded-full h-12 w-12 border-b-2 border-ssdi-primary\\\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\\\"min-h-screen bg-ssdi-light\\\">\n      <main className=\\\"max-w-4xl mx-auto px-6 py-8\\\">\n        <div className=\\\"mb-8\\\">\n          <h1 className=\\\"text-ssdi-4xl font-bold text-ssdi-primary mb-2\\\">\n            Google Account Integration\n          </h1>\n          <p className=\\\"text-ssdi-lg text-ssdi-neutral\\\">\n            Connect your Google account to automate calendar events and send emails.\n          </p>\n        </div>\n\n        <Card className=\\\"bg-white shadow-lg border border-gray-200\\\">\n          <CardHeader>\n            <CardTitle className=\\\"text-ssdi-2xl\\\">Gmail & Calendar Sync</CardTitle>\n            <CardDescription className=\\\"text-ssdi-base\\\">\n              Enable features by securely connecting your Google account. We only request permissions to create calendar events and send emails on your behalf. We will never read your data.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {status?.isConnected ? (\n              <div className=\\\"p-6 bg-green-50 border border-green-200 rounded-lg\\\">\n                <div className=\\\"flex items-center justify-between\\\">\n                  <div className=\\\"flex items-center gap-4\\\">\n                    <CheckCircle className=\\\"w-8 h-8 text-ssdi-success\\\" />\n                    <div>\n                      <p className=\\\"text-ssdi-lg font-semibold text-ssdi-neutral\\\">Connected</p>\n                      <p className=\\\"text-ssdi-base text-gray-600\\\">{status.email}</p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\\\"destructive\\\"\n                    onClick={() => disconnectMutation.mutate()}\n                    disabled={disconnectMutation.isPending}\n                  >\n                    <LogOut className=\\\"w-4 h-4 mr-2\\\" />\n                    Disconnect\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\\\"p-6 bg-gray-50 border border-gray-200 rounded-lg\\\">\n                <div className=\\\"flex items-center justify-between\\\">\n                  <div className=\\\"flex items-center gap-4\\\">\n                    <AlertTriangle className=\\\"w-8 h-8 text-ssdi-warning\\\" />\n                    <div>\n                      <p className=\\\"text-ssdi-lg font-semibold text-ssdi-neutral\\\">Not Connected</p>\n                      <p className=\\\"text-ssdi-base text-gray-600\\\">Connect to enable calendar and email features.</p>\n                    </div>\n                  </div>\n                  <Button asChild className=\\\"bg-ssdi-primary hover:bg-ssdi-primary-dark\\\">\n                    <a href=\\\"/api/auth/google\\\">\n                      <ExternalLink className=\\\"w-4 h-4 mr-2\\\" />\n                      Connect Google Account\n                    </a>\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n```\n\nFile to be created: `C:\\Users\\Administrator\\Documents\\SSDI\\client\\src\\pages\\contacts.tsx`\n\n**Instructions:**\n\n1.  Create this new page for managing user contacts. It will include functionality to list, add, edit, and delete contacts.\n\n```typescript\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Contact as ContactType } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Trash2, Edit, User, Briefcase, Mail, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nfunction ContactForm({ contact, onFinished }: { contact?: ContactType, onFinished: () => void }) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [name, setName] = useState(contact?.name || \"\");\n  const [role, setRole] = useState(contact?.role || \"\");\n  const [email, setEmail] = useState(contact?.email || \"\");\n\n  const mutation = useMutation({\n    mutationFn: (data: Partial<ContactType>) => {\n      return contact?.id \n        ? apiRequest(\"PATCH\", `/api/contacts/${contact.id}`, data)\n        : apiRequest(\"POST\", \"/api/contacts\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({ title: `Contact ${contact?.id ? 'updated' : 'added'} successfully` });\n      onFinished();\n    },\n    onError: () => {\n      toast({ title: `Failed to ${contact?.id ? 'update' : 'add'} contact`, variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate({ name, role, email });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\\\"space-y-4\\\">\n      <div>\n        <Label htmlFor=\\\"name\\\">Name</Label>\n        <Input id=\\\"name\\\" value={name} onChange={(e) => setName(e.target.value)} required />\n      </div>\n      <div>\n        <Label htmlFor=\\\"role\\\">Role (e.g., Doctor, Lawyer)</Label>\n        <Input id=\\\"role\\\" value={role} onChange={(e) => setRole(e.target.value)} />\n      </div>\n      <div>\n        <Label htmlFor=\\\"email\\\">Email</Label>\n        <Input id=\\\"email\\\" type=\\\"email\\\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n      </div>\n      <div className=\\\"flex justify-end gap-2\\\">\n        <Button type=\\\"button\\\" variant=\\\"ghost\\\" onClick={onFinished}>Cancel</Button>\n        <Button type=\\\"submit\\\" disabled={mutation.isPending}>\n          {mutation.isPending ? \"Saving...\" : \"Save Contact\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n\nfunction ContactItem({ contact }: { contact: ContactType }) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  const deleteMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", `/api/contacts/${contact.id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({ title: \"Contact deleted\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete contact\", variant: \"destructive\" });\n    }\n  });\n\n  return (\n    <div className=\\\"p-4 border rounded-lg flex items-center justify-between\\\">\n      <div className=\\\"flex items-center gap-4\\\">\n        <div className=\\\"p-3 bg-gray-100 rounded-full\\\">\n            <User className=\\\"w-6 h-6 text-gray-600\\\" />\n        </div>\n        <div>\n          <p className=\\\"font-semibold text-ssdi-lg\\\">{contact.name}</p>\n          <div className=\\\"flex items-center gap-4 text-sm text-gray-500\\\">\n            {contact.role && <span className=\\\"flex items-center gap-1\\\"><Briefcase className=\\\"w-4 h-4\\\" /> {contact.role}</span>}\n            <span className=\\\"flex items-center gap-1\\\"><Mail className=\\\"w-4 h-4\\\" /> {contact.email}</span>\n          </div>\n        </div>\n      </div>\n      <div className=\\\"flex gap-2\\\">\n        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n            <DialogTrigger asChild>\n                <Button variant=\\\"outline\\\" size=\\\"icon\\\"><Edit className=\\\"w-4 h-4\\\" /></Button>\n            </DialogTrigger>\n            <DialogContent>\n                <DialogHeader><DialogTitle>Edit Contact</DialogTitle></DialogHeader>\n                <ContactForm contact={contact} onFinished={() => setIsFormOpen(false)} />\n            </DialogContent>\n        </Dialog>\n        <Button variant=\\\"destructive\\\" size=\\\"icon\\\" onClick={() => {if(confirm('Are you sure?')) deleteMutation.mutate()}}>\n          <Trash2 className=\\\"w-4 h-4\\\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default function ContactsPage() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const { data: contacts, isLoading } = useQuery<ContactType[]>({ queryKey: [\"/api/contacts\"] });\n\n  return (\n    <div className=\\\"min-h-screen bg-ssdi-light\\\">\n      <main className=\\\"max-w-4xl mx-auto px-6 py-8\\\">\n        <div className=\\\"flex items-center justify-between mb-8\\\">\n          <div>\n            <h1 className=\\\"text-ssdi-4xl font-bold text-ssdi-primary mb-2\\\">My Contacts</h1>\n            <p className=\\\"text-ssdi-lg text-ssdi-neutral\\\">\n              Manage contacts for sending emails and documents.\n            </p>\n          </div>\n          <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n            <DialogTrigger asChild>\n                <Button className=\\\"bg-ssdi-primary hover:bg-ssdi-primary-dark\\\">\n                    <Plus className=\\\"w-4 h-4 mr-2\\\" /> Add Contact\n                </Button>\n            </DialogTrigger>\n            <DialogContent>\n                <DialogHeader><DialogTitle>Add New Contact</DialogTitle></DialogHeader>\n                <ContactForm onFinished={() => setIsFormOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card className=\\\"bg-white shadow-lg border border-gray-200\\\">\n          <CardContent className=\\\"p-6\\\">\n            {isLoading ? (\n              <p>Loading contacts...</p>\n            ) : contacts?.length ? (\n              <div className=\\\"space-y-4\\\">\n                {contacts.map(contact => <ContactItem key={contact.id} contact={contact} />)}\n              </div>\n            ) : (\n              <p className=\\\"text-center text-gray-500 py-8\\\">No contacts found. Add your first contact to get started.</p>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n```\n\nFile to be modified: `C:\\Users\\Administrator\\Documents\\SSDI\\client\\src\\App.tsx`\n\n**Instructions:**\n\n1.  Import the new `IntegrationsPage` and `ContactsPage`.\n2.  Add new `Link` components to the `Navigation` for 'Integrations' and 'Contacts'.\n3.  Add new `Route` components to the `Router` for the new pages.\n\n```typescript\nimport { Switch, Route, Link, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport RetirementTrackingPage from \"@/pages/retirement-tracking\";\nimport IntegrationsPage from \"@/pages/integrations\";\nimport ContactsPage from \"@/pages/contacts\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Navigation() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { href: \"/\", label: \"Dashboard\" },\n    { href: \"/retirement-tracking\", label: \"Early Retirement Tracking\" },\n    { href: \"/contacts\", label: \"Contacts\" },\n    { href: \"/integrations\", label: \"Integrations\" },\n  ];\n\n  return (\n    <nav className=\\\"bg-white shadow-sm border-b-2 border-gray-200\\\">\n      <div className=\\\"max-w-4xl mx-auto px-6\\\">\n        <div className=\\\"flex space-x-8\\\">\n          {navItems.map(item => (\n            <Link key={item.href} href={item.href}>\n              <a className={`inline-flex items-center px-1 pt-6 pb-4 border-b-2 text-ssdi-lg font-semibold transition-colors ${\n                location === item.href \n                  ? \"border-ssdi-primary text-ssdi-primary\" \n                  : \"border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300\"\n              }`}>\n                {item.label}\n              </a>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nfunction Router() {\n  return (\n    <div>\n      <Navigation />\n      <Switch>\n        <Route path=\\\"/\\\" component={Dashboard} />\n        <Route path=\\\"/retirement-tracking\\\" component={RetirementTrackingPage} />\n        <Route path=\\\"/integrations\\\" component={IntegrationsPage} />\n        <Route path=\\\"/contacts\\\" component={ContactsPage} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n```",
      "status": "Completed",
      "filepath": "C:\\Users\\Administrator\\Documents\\SSDI\\claude-tasks\\tasks\\task_5.md",
      "error_details": null
    },
    {
      "id": 6,
      "description": "Objective: Build a reusable modal for composing and sending emails with attachments, and integrate it into the document list.\n\nFile to be created: `C:\\Users\\Administrator\\Documents\\SSDI\\client\\src\\components\\email-composer.tsx`\n\n**Instructions:**\n\n1.  Create this new component. It will be a dialog that fetches the user's contacts and documents, allowing them to compose and send an email via the backend.\n\n```typescript\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Contact, Document } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Paperclip, X } from \"lucide-react\";\n\ninterface EmailComposerProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  initialDocument?: Document;\n}\n\nexport default function EmailComposer({ isOpen, onOpenChange, initialDocument }: EmailComposerProps) {\n  const { toast } = useToast();\n  const [to, setTo] = useState(\"\");\n  const [subject, setSubject] = useState(initialDocument ? `Document: ${initialDocument.name}` : \"\");\n  const [body, setBody] = useState(\"Please see the attached document(s) regarding my SSDI application.\");\n  const [attachmentIds, setAttachmentIds] = useState<number[]>(initialDocument ? [initialDocument.id] : []);\n\n  const { data: contacts } = useQuery<Contact[]>({ queryKey: [\"/api/contacts\"] });\n  const { data: documents } = useQuery<Document[]>({ \n    queryKey: [\"/api/sections/all/documents\"], // A hypothetical endpoint to get all documents\n    queryFn: async () => {\n        const sections = await apiRequest<any[]>(\"GET\", \"/api/sections\");\n        const docPromises = sections.map(s => apiRequest<Document[]>(\"GET\", `/api/sections/${s.id}/documents`));\n        const docArrays = await Promise.all(docPromises);\n        return docArrays.flat().filter(d => d.status === 'uploaded');\n    }\n   });\n\n  const sendMutation = useMutation({\n    mutationFn: (emailData: { to: string, subject: string, body: string, attachmentIds: number[] }) => \n      apiRequest(\"POST\", \"/api/email/send\", emailData),\n    onSuccess: () => {\n      toast({ title: \"Email Sent Successfully\" });\n      onOpenChange(false);\n      // Reset form\n      setTo(\"\");\n      setSubject(\"\");\n      setBody(\"Please see the attached document(s) regarding my SSDI application.\");\n      setAttachmentIds([]);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Failed to Send Email\", description: error.message, variant: \"destructive\" });\n    }\n  });\n\n  const handleSend = () => {\n    if (!to || !subject || !body) {\n      toast({ title: \"Please fill all required fields.\", variant: \"destructive\" });\n      return;\n    }\n    sendMutation.mutate({ to, subject, body, attachmentIds });\n  };\n  \n  const toggleAttachment = (docId: number) => {\n    setAttachmentIds(prev => prev.includes(docId) ? prev.filter(id => id !== docId) : [...prev, docId]);\n  }\n\n  const getAttachmentName = (id: number) => documents?.find(d => d.id === id)?.name;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\\\"sm:max-w-[625px]\\\">\n        <DialogHeader>\n          <DialogTitle>Send Email</DialogTitle>\n          <DialogDescription>Send documents to your contacts directly from the app.</DialogDescription>\n        </DialogHeader>\n        <div className=\\\"grid gap-4 py-4\\\">\n          <div>\n            <Label htmlFor=\\\"to\\\">To</Label>\n            <Select onValueChange={setTo} value={to}>\n              <SelectTrigger><SelectValue placeholder=\\\"Select a contact...\\\" /></SelectTrigger>\n              <SelectContent>\n                {contacts?.map(c => <SelectItem key={c.id} value={c.email}>{c.name} ({c.email})</SelectItem>)}\n              </SelectContent>\n            </Select>\n          </div>\n          <div>\n            <Label htmlFor=\\\"subject\\\">Subject</Label>\n            <Input id=\\\"subject\\\" value={subject} onChange={e => setSubject(e.target.value)} />\n          </div>\n          <div>\n            <Label htmlFor=\\\"body\\\">Body</Label>\n            <Textarea id=\\\"body\\\" value={body} onChange={e => setBody(e.target.value)} rows={8} />\n          </div>\n          <div>\n            <Label>Attachments</Label>\n            <div className=\\\"p-2 border rounded-md mt-1 max-h-40 overflow-y-auto\\\">\n                {documents?.map(doc => (\n                    <div key={doc.id} className=\\\"flex items-center justify-between p-1\\\">\n                        <label htmlFor={`doc-${doc.id}`} className=\\\"flex items-center gap-2 cursor-pointer\\\">\n                            <input type=\\\"checkbox\\\" id={`doc-${doc.id}`} checked={attachmentIds.includes(doc.id)} onChange={() => toggleAttachment(doc.id)} />\n                            {doc.name}\n                        </label>\n                    </div>\n                ))}\n            </div>\n            <div className=\\\"mt-2 flex flex-wrap gap-2\\\">\n                {attachmentIds.map(id => (\n                    <div key={id} className=\\\"flex items-center gap-1 bg-gray-100 rounded-full px-2 py-1 text-sm\\\">\n                        <Paperclip className=\\\"w-4 h-4\\\" />\n                        {getAttachmentName(id)}\n                        <button onClick={() => toggleAttachment(id)}><X className=\\\"w-4 h-4\\\" /></button>\n                    </div>\n                ))}\n            </div>\n          </div>\n        </div>\n        <div className=\\\"flex justify-end\\\">\n          <Button onClick={handleSend} disabled={sendMutation.isPending}>\n            {sendMutation.isPending ? 'Sending...' : 'Send Email'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n```\n\nFile to be modified: `C:\\Users\\Administrator\\Documents\\SSDI\\client\\src\\components\\document-item.tsx`\n\n**Instructions:**\n\n1.  Add state to manage the visibility of the `EmailComposer`.\n2.  Add a 'Send via Email' button.\n3.  Render the `EmailComposer` when the button is clicked.\n\n```typescript\nimport { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Document } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, Clock, AlertTriangle, Eye, Trash2, Send } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport EmailComposer from \"./email-composer\";\n\ninterface DocumentItemProps {\n  document: Document;\n}\n\nexport default function DocumentItem({ document }: DocumentItemProps) {\n  const [isEmailComposerOpen, setIsEmailComposerOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(\"DELETE\", `/api/documents/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/sections/${document.sectionId}/documents`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/sections\"] });\n      toast({\n        title: \"Document Deleted\",\n        description: \"The document has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete the document. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleView = () => {\n    if (document.fileName) {\n      window.open(`/api/files/${document.fileName}`, '_blank');\n    } else {\n      toast({\n        title: \"No File Available\",\n        description: \"This document hasn't been uploaded yet.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDelete = () => {\n    if (confirm(\"Are you sure you want to delete this document?\")) {\n      deleteMutation.mutate(document.id);\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (document.status) {\n      case \"uploaded\":\n        return <CheckCircle className=\\\"w-6 h-6 text-ssdi-success\\\" />;\n      case \"pending\":\n        return <Clock className=\\\"w-6 h-6 text-ssdi-warning\\\" />;\n      case \"missing\":\n        return <AlertTriangle className=\\\"w-6 h-6 text-ssdi-danger\\\" />;\n      default:\n        return <Clock className=\\\"w-6 h-6 text-gray-400\\\" />;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (document.status) {\n      case \"uploaded\":\n        return \"bg-green-50 border-green-200\";\n      case \"pending\":\n        return \"bg-yellow-50 border-yellow-200\";\n      case \"missing\":\n        return \"bg-red-50 border-red-200\";\n      default:\n        return \"bg-gray-50 border-gray-200\";\n    }\n  };\n\n  const formatFileSize = (bytes?: number | null) => {\n    if (!bytes) return \"\";\n    const kb = bytes / 1024;\n    const mb = kb / 1024;\n    if (mb >= 1) {\n      return `${mb.toFixed(1)} MB`;\n    }\n    return `${kb.toFixed(0)} KB`;\n  };\n\n  const formatDate = (date?: Date | null) => {\n    if (!date) return \"\";\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const getCategoryLabel = (category: string) => {\n    const categoryMap: Record<string, { label: string; color: string }> = {\n      personal: { label: \"Personal Records\", color: \"bg-blue-100 text-blue-800\" },\n      medical: { label: \"Medical Records\", color: \"bg-green-100 text-green-800\" },\n      legal: { label: \"Legal/Attorney\", color: \"bg-purple-100 text-purple-800\" },\n      employment: { label: \"Employment Records\", color: \"bg-orange-100 text-orange-800\" },\n      government: { label: \"Government Records\", color: \"bg-gray-100 text-gray-800\" }\n    };\n    return categoryMap[category] || { label: category, color: \"bg-gray-100 text-gray-800\" };\n  };\n\n  return (\n    <>\n      <div className={`flex items-center p-4 rounded-lg border ${getStatusColor()}`}>\n        <div className=\\\"mr-4\\\">\n          {getStatusIcon()}\n        </div>\n        \n        <div className=\\\"flex-1\\\">\n          <div className=\\\"flex items-center gap-2 mb-2\\\">\n            <h4 className=\\\"text-ssdi-lg font-semibold text-ssdi-neutral\\\">\n              {document.name}\n            </h4>\n            {document.category && (\n              <span className={`px-2 py-1 rounded-full text-xs font-semibold ${getCategoryLabel(document.category).color}`}>\n                {getCategoryLabel(document.category).label}\n              </span>\n            )}\n          </div>\n          <p className=\\\"text-ssdi-base text-gray-600 mb-1\\\">\n            {document.description}\n          </p>\n          \n          {document.uploadedAt && (\n            <p className=\\\"text-sm text-gray-500\\\">\n              Uploaded: {formatDate(document.uploadedAt)}\n              {document.fileSize && ` • ${formatFileSize(document.fileSize)}`}\n            </p>\n          )}\n          \n          {document.contactInfo && (\n            <p className=\\\"text-sm text-gray-500 mt-1\\\">\n              Contact: {document.contactInfo}\n            </p>\n          )}\n          \n          {document.notes && (\n            <p className=\\\"text-sm text-gray-600 mt-1 italic\\\">\n              {document.notes}\n            </p>\n          )}\n        </div>\n\n        <div className=\\\"flex gap-2\\\">\n          {document.status === \"uploaded\" && document.fileName && (\n            <>\n              <Button\n                onClick={handleView}\n                variant=\\\"outline\\\"\n                size=\\\"sm\\\"\n                className=\\\"text-ssdi-base font-medium\\\"\n              >\n                <Eye className=\\\"w-4 h-4 mr-2\\\" />\n                View\n              </Button>\n              <Button\n                onClick={() => setIsEmailComposerOpen(true)}\n                variant=\\\"outline\\\"\n                size=\\\"sm\\\"\n                className=\\\"text-ssdi-base font-medium text-ssdi-primary border-ssdi-primary hover:bg-blue-50\\\"\n              >\n                <Send className=\\\"w-4 h-4 mr-2\\\" />\n                Email\n              </Button>\n            </>\n          )}\n          \n          <Button\n            onClick={handleDelete}\n            variant=\\\"outline\\\"\n            size=\\\"sm\\\"\n            className=\\\"text-ssdi-danger border-ssdi-danger hover:bg-red-50\\\"\n            disabled={deleteMutation.isPending}\n          >\n            <Trash2 className=\\\"w-4 h-4 mr-2\\\" />\n            Delete\n          </Button>\n        </div>\n      </div>\n      {isEmailComposerOpen && (\n        <EmailComposer\n          isOpen={isEmailComposerOpen}\n          onOpenChange={setIsEmailComposerOpen}\n          initialDocument={document}\n        />\n      )}\n    </>\n  );\n}\n```",
      "status": "Completed",
      "filepath": "C:\\Users\\Administrator\\Documents\\SSDI\\claude-tasks\\tasks\\task_6.md",
      "error_details": null
    },
    {
      "id": 7,
      "description": "Objective: Ensure the frontend provides appropriate feedback when a calendar event is created automatically.\n\nFile to be modified: `C:\\Users\\Administrator\\Documents\\SSDI\\client\\pages\\retirement-tracking.tsx`\n\n**Instructions:**\n\n1.  Update the `createMutation` to handle the `calendarEventCreated` flag returned from the backend.\n2.  Display a specific toast notification if a calendar event was successfully created.\n\n```typescript\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { RetirementTracking } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Calendar, Phone, Mail, AlertTriangle, Clock, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport RetirementTrackingForm from \"@/components/retirement-tracking-form\";\nimport RetirementTrackingItem from \"@/components/retirement-tracking-item\";\n\nexport default function RetirementTrackingPage() {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: trackings, isLoading } = useQuery<RetirementTracking[]>({\n    queryKey: [\"/api/retirement-tracking\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (formData: FormData) => {\n      const response = await fetch('/api/retirement-tracking', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`Creation failed: ${error}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/retirement-tracking\"] });\n      setShowAddForm(false);\n      toast({\n        title: \"Entry Added\",\n        description: \"Your retirement tracking entry has been successfully added.\",\n      });\n\n      if (data.calendarEventCreated) {\n        toast({\n            title: \"Calendar Event Created\",\n            description: \"An event was automatically added to your Google Calendar.\",\n            className: \"bg-blue-50 border-blue-200 text-blue-800\"\n        });\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Add Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddEntry = (formData: FormData) => {\n    createMutation.mutate(formData);\n  };\n\n  const getOverviewStats = () => {\n    if (!trackings) return { total: 0, actionRequired: 0, highPriority: 0 };\n    \n    return {\n      total: trackings.length,\n      actionRequired: trackings.filter(t => t.isActionRequired).length,\n      highPriority: trackings.filter(t => t.priority === 'high').length,\n    };\n  };\n\n  const stats = getOverviewStats();\n\n  if (isLoading) {\n    return (\n      <div className=\\\"min-h-screen bg-ssdi-light flex items-center justify-center\\\">\n        <div className=\\\"text-center\\\">\n          <div className=\\\"animate-spin rounded-full h-12 w-12 border-b-2 border-ssdi-primary mx-auto mb-4\\\"></div>\n          <p className=\\\"text-ssdi-xl font-semibold\\\">Loading retirement tracking...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\\\"min-h-screen bg-ssdi-light\\\">\n      <main className=\\\"max-w-4xl mx-auto px-6 py-8\\\">\n        {/* Header */}\n        <div className=\\\"mb-8\\\">\n          <h1 className=\\\"text-ssdi-4xl font-bold text-ssdi-primary mb-2\\\">\n            Early Retirement Tracking\n          </h1>\n          <p className=\\\"text-ssdi-lg text-ssdi-neutral\\\">\n            Track all communications and important dates from the Social Security Administration\n          </p>\n        </div>\n\n        {/* Overview Stats */}\n        <Card className=\\\"bg-white shadow-lg border border-gray-200 mb-8\\\">\n          <CardContent className=\\\"p-8\\\">\n            <h2 className=\\\"text-ssdi-2xl font-bold text-ssdi-neutral mb-6\\\">\n              Communication Overview\n            </h2>\n            \n            <div className=\\\"grid grid-cols-1 md:grid-cols-3 gap-6\\\">\n              <div className=\\\"text-center p-4 bg-blue-50 rounded-lg border border-blue-200\\\">\n                <Calendar className=\\\"w-12 h-12 text-ssdi-primary mx-auto mb-2\\\" />\n                <p className=\\\"text-ssdi-lg font-semibold text-ssdi-primary\\\">Total Entries</p>\n                <p className=\\\"text-ssdi-2xl font-bold text-ssdi-primary\\\">{stats.total}</p>\n              </div>\n              \n              <div className=\\\"text-center p-4 bg-yellow-50 rounded-lg border border-yellow-200\\\">\n                <AlertTriangle className=\\\"w-12 h-12 text-ssdi-warning mx-auto mb-2\\\" />\n                <p className=\\\"text-ssdi-lg font-semibold text-ssdi-warning\\\">Action Required</p>\n                <p className=\\\"text-ssdi-2xl font-bold text-ssdi-warning\\\">{stats.actionRequired}</p>\n              </div>\n              \n              <div className=\\\"text-center p-4 bg-red-50 rounded-lg border border-red-200\\\">\n                <Clock className=\\\"w-12 h-12 text-ssdi-danger mx-auto mb-2\\\" />\n                <p className=\\\"text-ssdi-lg font-semibold text-ssdi-danger\\\">High Priority</p>\n                <p className=\\\"text-ssdi-2xl font-bold text-ssdi-danger\\\">{stats.highPriority}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Add Entry Button */}\n        <div className=\\\"mb-8\\\">\n          <Button\n            onClick={() => setShowAddForm(!showAddForm)}\n            className=\\\"bg-ssdi-primary hover:bg-ssdi-primary-dark text-white px-6 py-3 text-ssdi-lg font-semibold\\\"\n          >\n            <Plus className=\\\"w-6 h-6 mr-2\\\" />\n            {showAddForm ? \"Cancel\" : \"Add New Entry\"}\n          </Button>\n        </div>\n\n        {/* Add Entry Form */}\n        {showAddForm && (\n          <div className=\\\"mb-8\\\">\n            <RetirementTrackingForm\n              onSubmit={handleAddEntry}\n              onCancel={() => setShowAddForm(false)}\n              isSubmitting={createMutation.isPending}\n            />\n          </div>\n        )}\n\n        {/* Tracking Entries */}\n        <div className=\\\"space-y-6\\\">\n          {trackings?.map((tracking) => (\n            <RetirementTrackingItem key={tracking.id} tracking={tracking} />\n          ))}\n        </div>\n\n        {trackings?.length === 0 && !showAddForm && (\n          <Card className=\\\"bg-white shadow-lg border border-gray-200\\\">\n            <CardContent className=\\\"p-8 text-center\\\">\n              <Calendar className=\\\"w-16 h-16 text-gray-400 mx-auto mb-4\\\" />\n              <h3 className=\\\"text-ssdi-xl font-semibold text-ssdi-neutral mb-2\\\">\n                No Tracking Entries Yet\n              </h3>\n              <p className=\\\"text-ssdi-base text-gray-600 mb-6\\\">\n                Start tracking your early retirement communications by adding your first entry.\n              </p>\n              <Button\n                onClick={() => setShowAddForm(true)}\n                className=\\\"bg-ssdi-primary hover:bg-ssdi-primary-dark text-white px-6 py-3 text-ssdi-lg font-semibold\\\"\n              >\n                <Plus className=\\\"w-6 h-6 mr-2\\\" />\n                Add First Entry\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n    </div>\n  );\n}\n```",
      "status": "Completed",
      "filepath": "C:\\Users\\Administrator\\Documents\\SSDI\\claude-tasks\\tasks\\task_7.md",
      "error_details": null
    }
  ]
}